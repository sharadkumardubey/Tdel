{"ast":null,"code":"import Swal from'sweetalert2';var isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service worker.');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');Swal.fire({toast:'true',position:'bottom',icon:'success',title:'App is ready to work offline.',showConfirmButton:false,timer:6000});// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"sources":["C:/Users/91912/OneDrive/Documents/toDElete/quiz-app/src/serviceWorkerRegistration.js"],"names":["Swal","isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","fire","toast","position","icon","title","showConfirmButton","timer","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["import Swal from 'sweetalert2';\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service worker.'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              Swal.fire({\r\n                toast: 'true',\r\n                position: 'bottom',\r\n                icon: 'success',\r\n                title: 'App is ready to work offline.',\r\n                showConfirmButton: false,\r\n                timer: 6000\r\n              });\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}