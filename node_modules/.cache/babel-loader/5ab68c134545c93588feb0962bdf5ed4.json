{"ast":null,"code":"import _slicedToArray from\"C:/Users/91912/OneDrive/Documents/toDElete/quiz-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Button,Popup}from'semantic-ui-react';import Swal from'sweetalert2';import{timeConverter}from'../../utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Countdown=function Countdown(_ref){var countdownTime=_ref.countdownTime,timeOver=_ref.timeOver,setTimeTaken=_ref.setTimeTaken;var totalTime=countdownTime*1000;var _useState=useState(totalTime),_useState2=_slicedToArray(_useState,2),timerTime=_useState2[0],setTimerTime=_useState2[1];var _timeConverter=timeConverter(timerTime),hours=_timeConverter.hours,minutes=_timeConverter.minutes,seconds=_timeConverter.seconds;useEffect(function(){var timer=setInterval(function(){var newTime=timerTime-1000;if(newTime>=0){setTimerTime(newTime);}else{clearInterval(timer);Swal.fire({title:\"Your Time's Up\",icon:'info',timer:5000,willClose:function willClose(){return timeOver(totalTime-timerTime);}});}},1000);return function(){clearInterval(timer);setTimeTaken(totalTime-timerTime+1000);};// eslint-disable-next-line\n},[timerTime]);return/*#__PURE__*/_jsxs(Button.Group,{size:\"massive\",basic:true,floated:\"right\",children:[/*#__PURE__*/_jsx(Popup,{content:\"Hours\",trigger:/*#__PURE__*/_jsx(Button,{active:true,children:hours}),position:\"bottom left\"}),/*#__PURE__*/_jsx(Popup,{content:\"Minutes\",trigger:/*#__PURE__*/_jsx(Button,{active:true,children:minutes}),position:\"bottom left\"}),/*#__PURE__*/_jsx(Popup,{content:\"Seconds\",trigger:/*#__PURE__*/_jsx(Button,{active:true,children:seconds}),position:\"bottom left\"})]});};export default Countdown;","map":{"version":3,"sources":["C:/Users/91912/OneDrive/Documents/toDElete/quiz-app/src/components/Countdown/index.js"],"names":["React","useState","useEffect","Button","Popup","Swal","timeConverter","Countdown","countdownTime","timeOver","setTimeTaken","totalTime","timerTime","setTimerTime","hours","minutes","seconds","timer","setInterval","newTime","clearInterval","fire","title","icon","willClose"],"mappings":"0KAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA,OAASC,MAAT,CAAiBC,KAAjB,KAA8B,mBAA9B,CACA,MAAOC,CAAAA,IAAP,KAAiB,aAAjB,CAEA,OAASC,aAAT,KAA8B,aAA9B,C,wFAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAA+C,IAA5CC,CAAAA,aAA4C,MAA5CA,aAA4C,CAA7BC,QAA6B,MAA7BA,QAA6B,CAAnBC,YAAmB,MAAnBA,YAAmB,CAC/D,GAAMC,CAAAA,SAAS,CAAGH,aAAa,CAAG,IAAlC,CAD+D,cAE7BP,QAAQ,CAACU,SAAD,CAFqB,wCAExDC,SAFwD,eAE7CC,YAF6C,kCAG3BP,aAAa,CAACM,SAAD,CAHc,CAGvDE,KAHuD,gBAGvDA,KAHuD,CAGhDC,OAHgD,gBAGhDA,OAHgD,CAGvCC,OAHuC,gBAGvCA,OAHuC,CAK/Dd,SAAS,CAAC,UAAM,CACd,GAAMe,CAAAA,KAAK,CAAGC,WAAW,CAAC,UAAM,CAC9B,GAAMC,CAAAA,OAAO,CAAGP,SAAS,CAAG,IAA5B,CAEA,GAAIO,OAAO,EAAI,CAAf,CAAkB,CAChBN,YAAY,CAACM,OAAD,CAAZ,CACD,CAFD,IAEO,CACLC,aAAa,CAACH,KAAD,CAAb,CAEAZ,IAAI,CAACgB,IAAL,CAAU,CACRC,KAAK,iBADG,CAERC,IAAI,CAAE,MAFE,CAGRN,KAAK,CAAE,IAHC,CAIRO,SAAS,CAAE,2BAAMf,CAAAA,QAAQ,CAACE,SAAS,CAAGC,SAAb,CAAd,EAJH,CAAV,EAMD,CACF,CAfwB,CAetB,IAfsB,CAAzB,CAiBA,MAAO,WAAM,CACXQ,aAAa,CAACH,KAAD,CAAb,CACAP,YAAY,CAACC,SAAS,CAAGC,SAAZ,CAAwB,IAAzB,CAAZ,CACD,CAHD,CAKA;AACD,CAxBQ,CAwBN,CAACA,SAAD,CAxBM,CAAT,CA0BA,mBACE,MAAC,MAAD,CAAQ,KAAR,EAAc,IAAI,CAAC,SAAnB,CAA6B,KAAK,KAAlC,CAAmC,OAAO,CAAC,OAA3C,wBACE,KAAC,KAAD,EACE,OAAO,CAAC,OADV,CAEE,OAAO,cAAE,KAAC,MAAD,EAAQ,MAAM,KAAd,UAAgBE,KAAhB,EAFX,CAGE,QAAQ,CAAC,aAHX,EADF,cAME,KAAC,KAAD,EACE,OAAO,CAAC,SADV,CAEE,OAAO,cAAE,KAAC,MAAD,EAAQ,MAAM,KAAd,UAAgBC,OAAhB,EAFX,CAGE,QAAQ,CAAC,aAHX,EANF,cAWE,KAAC,KAAD,EACE,OAAO,CAAC,SADV,CAEE,OAAO,cAAE,KAAC,MAAD,EAAQ,MAAM,KAAd,UAAgBC,OAAhB,EAFX,CAGE,QAAQ,CAAC,aAHX,EAXF,GADF,CAmBD,CAlDD,CA0DA,cAAeT,CAAAA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Popup } from 'semantic-ui-react';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { timeConverter } from '../../utils';\r\n\r\nconst Countdown = ({ countdownTime, timeOver, setTimeTaken }) => {\r\n  const totalTime = countdownTime * 1000;\r\n  const [timerTime, setTimerTime] = useState(totalTime);\r\n  const { hours, minutes, seconds } = timeConverter(timerTime);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      const newTime = timerTime - 1000;\r\n\r\n      if (newTime >= 0) {\r\n        setTimerTime(newTime);\r\n      } else {\r\n        clearInterval(timer);\r\n\r\n        Swal.fire({\r\n          title: `Your Time's Up`,\r\n          icon: 'info',\r\n          timer: 5000,\r\n          willClose: () => timeOver(totalTime - timerTime)\r\n        });\r\n      }\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n      setTimeTaken(totalTime - timerTime + 1000);\r\n    };\r\n\r\n    // eslint-disable-next-line\r\n  }, [timerTime]);\r\n\r\n  return (\r\n    <Button.Group size=\"massive\" basic floated=\"right\">\r\n      <Popup\r\n        content=\"Hours\"\r\n        trigger={<Button active>{hours}</Button>}\r\n        position=\"bottom left\"\r\n      />\r\n      <Popup\r\n        content=\"Minutes\"\r\n        trigger={<Button active>{minutes}</Button>}\r\n        position=\"bottom left\"\r\n      />\r\n      <Popup\r\n        content=\"Seconds\"\r\n        trigger={<Button active>{seconds}</Button>}\r\n        position=\"bottom left\"\r\n      />\r\n    </Button.Group>\r\n  );\r\n};\r\n\r\nCountdown.propTypes = {\r\n  countdownTime: PropTypes.number.isRequired,\r\n  timeOver: PropTypes.func.isRequired,\r\n  setTimeTaken: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Countdown;\r\n"]},"metadata":{},"sourceType":"module"}